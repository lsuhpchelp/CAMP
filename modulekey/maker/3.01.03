#%Module

# =====================================================================
# Generated by CAMP (Containerized Application Modulekey Producer)
# Developer: Jason Li (jasonli3@lsu.edu)
# =====================================================================

# ---------------------------------------------------------------------
# Software specific information
# ---------------------------------------------------------------------

# Conflicts
conflict maker 

# Module information
module-whatis MAKER is a portable and easily configurable genome annotation pipeline.
module-version 3.01.03

# Singularity options
set SINGULARITY_IMAGE "/home/admin/singularity/maker-3.01.03.sif"
set SINGULARITY_BINDPATHS "/work,/project,/usr/local/packages,/ddnA,/var/scratch,"
set SINGULARITY_FLAGS ""

# List of commands to overwrite
set cmds {
maker maker2chado maker2eval_gtf maker2jbrowse maker2wap maker2zff maker_functional_fasta maker_functional_gff maker_map_ids
AED_cdf_generator.pl cegma2gff.pl cegma2zff chado2gff3 compare_gff3_to_chado cufflinks2gff3 fasta_merge fasta_tool genemark_gtf2gff3 gff3_merge ipr_update_gff iprscan2gff3  map2assembly map_data_ids map_fasta_ids map_gff_ids match2gene.pl quality_filter.pl split_gff3 tophat2gff3 train_augustus.pl zff2genbank.pl
}

# Set environment varialbles


# ---------------------------------------------------------------------
# Module key setup template
# ---------------------------------------------------------------------

# Combine Singularity exec command
set singularity_exec "singularity exec -B $SINGULARITY_BINDPATHS $SINGULARITY_FLAGS $SINGULARITY_IMAGE"

# Overwrite the list of commands upon loading
if { [ module-info mode load ] } {
    foreach cmd $cmds {
        if { [ module-info shelltype csh ] } {
            puts "alias $cmd $singularity_exec $cmd $*; "
        } elseif { [ module-info shelltype sh ] } {
            puts "$cmd () {"
            puts "    $singularity_exec $cmd $@"
            puts "}"
            #puts "export -f $cmd"
        }
    }
}

# Unset commands upon unloading
if { [ module-info mode unload ] } {
    foreach cmd $cmds {
        if { [ module-info shelltype csh ] } {
            puts "unalias $cmd"
        } elseif { [ module-info shelltype sh ] } {
            puts "unset -f $cmd"
        }
    }
}

# For "module help" and "module load"
if { [ module-info mode help ] || [ module-info mode load ] || [ module-info mode display ] } {
    puts stderr "
\[ Help information \]

1. You may use below commands as normal:
$cmds
2. Those commands may only run on computing nodes (not available on head nodes). Make sure you start a job!
"
}
proc ModulesHelp {} {
}
